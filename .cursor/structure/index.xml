<?xml version="1.0" encoding="UTF-8"?>
<project>
    <name>TokenDSL</name>
    <version>1.0.0</version>
    
    <!-- Root Structure -->
    <directory name="src">
        <!-- Type Definitions -->
        <directory name="types">
            <!-- Core Types -->
            <directory name="core">
                <file name="index.ts">Core type definitions</file>
                <file name="api.ts">
                    <interface name="ApiDefinition">Record of endpoint definitions</interface>
                    <interface name="EndpointDefinition">Endpoint configuration and handler</interface>
                    <interface name="Handler">Request handler function type</interface>
                    <interface name="Middleware">Express middleware type</interface>
                </file>
                <file name="config.ts">
                    <interface name="ServiceConfig">Service configuration options</interface>
                    <interface name="ServerConfig">Server configuration options</interface>
                    <interface name="DatabaseConfig">Database configuration options</interface>
                </file>
                <file name="errors.ts">
                    <interface name="ApiError">API error response type</interface>
                    <interface name="ValidationError">Validation error type</interface>
                    <interface name="BusinessError">Business logic error type</interface>
                </file>
            </directory>

            <!-- Data Models -->
            <directory name="models">
                <file name="index.ts">Data model type definitions</file>
                
                <!-- User Models -->
                <file name="user.ts">
                    <interface name="User">
                        id: string;
                        email: string;
                        password: string;
                        firstName: string;
                        lastName: string;
                        role: UserRole;
                        status: UserStatus;
                        createdAt: Date;
                        updatedAt: Date;
                        lastLoginAt?: Date;
                        metadata: Record<string, unknown>;
                    </interface>
                    <interface name="UserCreate">
                        email: string;
                        password: string;
                        firstName: string;
                        lastName: string;
                        role?: UserRole;
                        metadata?: Record<string, unknown>;
                    </interface>
                    <interface name="UserUpdate">
                        email?: string;
                        password?: string;
                        firstName?: string;
                        lastName?: string;
                        role?: UserRole;
                        status?: UserStatus;
                        metadata?: Record<string, unknown>;
                    </interface>
                    <interface name="UserFilter">
                        email?: string;
                        role?: UserRole;
                        status?: UserStatus;
                        createdAt?: DateRange;
                        search?: string;
                    </interface>
                    <interface name="UserSort">
                        field: 'email' | 'firstName' | 'lastName' | 'createdAt' | 'lastLoginAt';
                        direction: SortDirection;
                    </interface>
                    <type name="UserRole">'admin' | 'user' | 'guest'</type>
                    <type name="UserStatus">'active' | 'inactive' | 'blocked' | 'pending'</type>
                </file>

                <!-- Order Models -->
                <file name="order.ts">
                    <interface name="Order">
                        id: string;
                        userId: string;
                        items: OrderItem[];
                        totalAmount: Price;
                        status: OrderStatus;
                        paymentStatus: PaymentStatus;
                        shippingAddress: Address;
                        billingAddress: Address;
                        createdAt: Date;
                        updatedAt: Date;
                        metadata: Record<string, unknown>;
                    </interface>
                    <interface name="OrderCreate">
                        userId: string;
                        items: OrderItem[];
                        shippingAddress: Address;
                        billingAddress: Address;
                        metadata?: Record<string, unknown>;
                    </interface>
                    <interface name="OrderUpdate">
                        status?: OrderStatus;
                        paymentStatus?: PaymentStatus;
                        shippingAddress?: Address;
                        billingAddress?: Address;
                        metadata?: Record<string, unknown>;
                    </interface>
                    <interface name="OrderItem">
                        productId: string;
                        quantity: number;
                        price: Price;
                        metadata?: Record<string, unknown>;
                    </interface>
                    <interface name="OrderFilter">
                        userId?: string;
                        status?: OrderStatus;
                        paymentStatus?: PaymentStatus;
                        totalAmount?: PriceRange;
                        createdAt?: DateRange;
                    </interface>
                    <interface name="OrderSort">
                        field: 'createdAt' | 'totalAmount' | 'status';
                        direction: SortDirection;
                    </interface>
                    <type name="OrderStatus">'pending' | 'processing' | 'shipped' | 'delivered' | 'cancelled'</type>
                    <type name="PaymentStatus">'pending' | 'paid' | 'failed' | 'refunded'</type>
                </file>

                <!-- Product Models -->
                <file name="product.ts">
                    <interface name="Product">
                        id: string;
                        name: string;
                        description: string;
                        price: Price;
                        category: ProductCategory;
                        status: ProductStatus;
                        images: Image[];
                        stock: number;
                        createdAt: Date;
                        updatedAt: Date;
                        metadata: Record<string, unknown>;
                    </interface>
                    <interface name="ProductCreate">
                        name: string;
                        description: string;
                        price: Price;
                        category: ProductCategory;
                        images?: Image[];
                        stock: number;
                        metadata?: Record<string, unknown>;
                    </interface>
                    <interface name="ProductUpdate">
                        name?: string;
                        description?: string;
                        price?: Price;
                        category?: ProductCategory;
                        status?: ProductStatus;
                        images?: Image[];
                        stock?: number;
                        metadata?: Record<string, unknown>;
                    </interface>
                    <interface name="ProductCategory">
                        id: string;
                        name: string;
                        description?: string;
                        parentId?: string;
                        metadata?: Record<string, unknown>;
                    </interface>
                    <interface name="ProductFilter">
                        category?: string;
                        status?: ProductStatus;
                        price?: PriceRange;
                        stock?: { min?: number; max?: number };
                        search?: string;
                    </interface>
                    <interface name="ProductSort">
                        field: 'name' | 'price' | 'stock' | 'createdAt';
                        direction: SortDirection;
                    </interface>
                    <type name="ProductStatus">'active' | 'inactive' | 'out_of_stock' | 'discontinued'</type>
                </file>

                <!-- Common Models -->
                <file name="common.ts">
                    <interface name="Address">
                        street: string;
                        city: string;
                        state: string;
                        country: string;
                        postalCode: string;
                        metadata?: Record<string, unknown>;
                    </interface>
                    <interface name="Contact">
                        email: string;
                        phone?: string;
                        mobile?: string;
                        metadata?: Record<string, unknown>;
                    </interface>
                    <interface name="Price">
                        amount: number;
                        currency: string;
                        metadata?: Record<string, unknown>;
                    </interface>
                    <interface name="Image">
                        url: string;
                        alt?: string;
                        width?: number;
                        height?: number;
                        metadata?: Record<string, unknown>;
                    </interface>
                    <interface name="Metadata">
                        [key: string]: unknown;
                    </interface>
                </file>

                <!-- Filter Models -->
                <file name="filters.ts">
                    <interface name="DateRange">
                        from: Date;
                        to: Date;
                    </interface>
                    <interface name="PriceRange">
                        min: Price;
                        max: Price;
                    </interface>
                    <interface name="SearchFilter">
                        query: string;
                        fields: string[];
                    </interface>
                    <interface name="StatusFilter">
                        status: string[];
                    </interface>
                    <interface name="CategoryFilter">
                        categoryId: string;
                        includeSubcategories?: boolean;
                    </interface>
                </file>

                <!-- Sort Models -->
                <file name="sorts.ts">
                    <type name="SortDirection">'asc' | 'desc'</type>
                    <interface name="SortField">
                        field: string;
                        direction: SortDirection;
                    </interface>
                    <interface name="MultiSort">
                        fields: SortField[];
                    </interface>
                </file>

                <!-- Pagination Models -->
                <file name="pagination.ts">
                    <interface name="PaginationParams">
                        page: number;
                        limit: number;
                    </interface>
                    <interface name="PaginationResult<T>">
                        items: T[];
                        total: number;
                        page: number;
                        limit: number;
                        totalPages: number;
                    </interface>
                    <interface name="PageInfo">
                        currentPage: number;
                        totalPages: number;
                        hasNextPage: boolean;
                        hasPreviousPage: boolean;
                    </interface>
                </file>

                <!-- Validation Models -->
                <file name="validation.ts">
                    <interface name="ValidationRule">
                        type: ValidationType;
                        message: string;
                        params?: Record<string, unknown>;
                    </interface>
                    <interface name="ValidationError">
                        field: string;
                        message: string;
                        code: string;
                        params?: Record<string, unknown>;
                    </interface>
                    <interface name="ValidationResult">
                        isValid: boolean;
                        errors: ValidationError[];
                    </interface>
                    <type name="ValidationType">'required' | 'email' | 'min' | 'max' | 'pattern' | 'custom'</type>
                </file>

                <!-- Response Models -->
                <file name="responses.ts">
                    <interface name="ApiResponse<T>">
                        success: boolean;
                        data?: T;
                        error?: ApiError;
                    </interface>
                    <interface name="SuccessResponse<T>">
                        success: true;
                        data: T;
                    </interface>
                    <interface name="ErrorResponse">
                        success: false;
                        error: ApiError;
                    </interface>
                    <interface name="ListResponse<T>">
                        success: true;
                        data: T[];
                        pagination: PaginationResult<T>;
                    </interface>
                </file>
            </directory>

            <!-- DSL Types -->
            <directory name="dsl">
                <file name="index.ts">DSL type definitions</file>
                <file name="model.ts">
                    <interface name="ModelDefinition">DSL model definition</interface>
                    <interface name="FieldDefinition">Model field definition</interface>
                    <interface name="RelationDefinition">Model relation definition</interface>
                </file>
                <file name="endpoint.ts">
                    <interface name="EndpointDefinition">DSL endpoint definition</interface>
                    <interface name="InputDefinition">Endpoint input definition</interface>
                    <interface name="OutputDefinition">Endpoint output definition</interface>
                </file>
                <file name="service.ts">
                    <interface name="ServiceDefinition">DSL service definition</interface>
                    <interface name="ServiceConfig">Service configuration</interface>
                </file>
            </directory>

            <!-- Domain Types -->
            <directory name="domain">
                <file name="index.ts">Domain type definitions</file>
                <file name="entity.ts">
                    <interface name="Entity">Base entity interface</interface>
                    <interface name="AggregateRoot">Aggregate root interface</interface>
                    <interface name="ValueObject">Value object interface</interface>
                </file>
                <file name="repository.ts">
                    <interface name="Repository">Base repository interface</interface>
                    <interface name="QueryOptions">Repository query options</interface>
                </file>
                <file name="event.ts">
                    <interface name="DomainEvent">Domain event interface</interface>
                    <interface name="EventHandler">Event handler interface</interface>
                </file>
            </directory>

            <!-- Application Types -->
            <directory name="application">
                <file name="index.ts">Application type definitions</file>
                <file name="command.ts">
                    <interface name="Command">Command interface</interface>
                    <interface name="CommandHandler">Command handler interface</interface>
                </file>
                <file name="query.ts">
                    <interface name="Query">Query interface</interface>
                    <interface name="QueryHandler">Query handler interface</interface>
                </file>
                <file name="dto.ts">
                    <interface name="DTO">Data transfer object interface</interface>
                    <interface name="CreateDTO">Create DTO interface</interface>
                    <interface name="UpdateDTO">Update DTO interface</interface>
                </file>
            </directory>

            <!-- Infrastructure Types -->
            <directory name="infrastructure">
                <file name="index.ts">Infrastructure type definitions</file>
                <file name="database.ts">
                    <interface name="Database">Database interface</interface>
                    <interface name="Transaction">Transaction interface</interface>
                </file>
                <file name="cache.ts">
                    <interface name="Cache">Cache interface</interface>
                    <interface name="CacheOptions">Cache options</interface>
                </file>
                <file name="messaging.ts">
                    <interface name="MessageBus">Message bus interface</interface>
                    <interface name="Message">Message interface</interface>
                </file>
            </directory>

            <!-- UI Types -->
            <directory name="ui">
                <file name="index.ts">UI type definitions</file>
                <file name="component.ts">
                    <interface name="Component">UI component interface</interface>
                    <interface name="ComponentProps">Component props interface</interface>
                </file>
                <file name="form.ts">
                    <interface name="FormField">Form field interface</interface>
                    <interface name="FormValidation">Form validation interface</interface>
                </file>
                <file name="layout.ts">
                    <interface name="Layout">Layout interface</interface>
                    <interface name="LayoutProps">Layout props interface</interface>
                </file>
            </directory>

            <!-- Shared Types -->
            <directory name="shared">
                <file name="index.ts">Shared type definitions</file>
                <file name="common.ts">
                    <interface name="Pagination">Pagination interface</interface>
                    <interface name="Sorting">Sorting interface</interface>
                    <interface name="Filtering">Filtering interface</interface>
                </file>
                <file name="validation.ts">
                    <interface name="ValidationRule">Validation rule interface</interface>
                    <interface name="ValidationResult">Validation result interface</interface>
                </file>
                <file name="i18n.ts">
                    <interface name="Translation">Translation interface</interface>
                    <interface name="Locale">Locale interface</interface>
                </file>
            </directory>
        </directory>

        <!-- DSL Definitions -->
        <directory name="dsl">
            <!-- Users Service -->
            <directory name="users-service-v1.0">
                <file name="index.dsl.ts">Service definition</file>
                <file name="service.config.dsl.ts">Service configuration</file>
                <directory name="models">
                    <file name="user.model.dsl.ts">User model definition</file>
                    <file name="role.model.dsl.ts">Role model definition</file>
                </directory>
                <directory name="endpoints">
                    <file name="users.endpoints.dsl.ts">User endpoints</file>
                    <file name="auth.endpoints.dsl.ts">Auth endpoints</file>
                </directory>
                <directory name="i18n">
                    <file name="en.mo">English translations</file>
                    <file name="pl.mo">Polish translations</file>
                    <file name="i18n.dsl.ts">i18n configuration</file>
                </directory>
                <directory name="test-data">
                    <file name="users.data.json">User test data</file>
                    <file name="roles.data.json">Role test data</file>
                </directory>
            </directory>
            
            <!-- Orders Service -->
            <directory name="orders-service-v2.0">
                <file name="index.dsl.ts">Service definition</file>
                <file name="service.config.dsl.ts">Service configuration</file>
                <directory name="models">
                    <file name="order.model.dsl.ts">Order model definition</file>
                    <file name="product.model.dsl.ts">Product model definition</file>
                </directory>
                <directory name="endpoints">
                    <file name="orders.endpoints.dsl.ts">Order endpoints</file>
                    <file name="products.endpoints.dsl.ts">Product endpoints</file>
                </directory>
                <directory name="i18n">
                    <file name="en.mo">English translations</file>
                    <file name="pl.mo">Polish translations</file>
                    <file name="i18n.dsl.ts">i18n configuration</file>
                </directory>
                <directory name="test-data">
                    <file name="orders.data.json">Order test data</file>
                    <file name="products.data.json">Product test data</file>
                </directory>
            </directory>
            
            <!-- Common Resources -->
            <directory name="common">
                <directory name="models">
                    <file name="base.model.dsl.ts">Base model definitions</file>
                    <file name="shared.model.dsl.ts">Shared model definitions</file>
                </directory>
                <directory name="middlewares">
                    <file name="auth.middleware.dsl.ts">Auth middleware</file>
                    <file name="validation.middleware.dsl.ts">Validation middleware</file>
                </directory>
                <directory name="validators">
                    <file name="common.validator.dsl.ts">Common validators</file>
                    <file name="custom.validator.dsl.ts">Custom validators</file>
                </directory>
            </directory>
        </directory>

        <!-- Layers -->
        <directory name="layers">
            <directory name="presentation">
                <file name="index.ts">Presentation layer entry point</file>
                <file name="controllers.ts">API controllers</file>
                <file name="middleware.ts">HTTP middleware</file>
                <file name="validation.ts">Request validation</file>
                <directory name="__tests__">
                    <file name="controllers.test.ts">Controller tests</file>
                    <file name="middleware.test.ts">Middleware tests</file>
                    <file name="validation.test.ts">Validation tests</file>
                    <file name="fixtures.ts">Test fixtures</file>
                </directory>
            </directory>
            
            <directory name="application">
                <file name="index.ts">Application layer entry point</file>
                <file name="use-cases.ts">Business use cases</file>
                <file name="services.ts">Application services</file>
                <file name="dto.ts">Data transfer objects</file>
                <directory name="__tests__">
                    <file name="use-cases.test.ts">Use case tests</file>
                    <file name="services.test.ts">Service tests</file>
                    <file name="dto.test.ts">DTO tests</file>
                    <file name="fixtures.ts">Test fixtures</file>
                </directory>
            </directory>
            
            <directory name="domain">
                <file name="index.ts">Domain layer entry point</file>
                <file name="entities.ts">Domain entities</file>
                <file name="value-objects.ts">Value objects</file>
                <file name="aggregates.ts">Aggregates</file>
                <directory name="__tests__">
                    <file name="entities.test.ts">Entity tests</file>
                    <file name="value-objects.test.ts">Value object tests</file>
                    <file name="aggregates.test.ts">Aggregate tests</file>
                    <file name="fixtures.ts">Test fixtures</file>
                </directory>
            </directory>
            
            <directory name="infrastructure">
                <file name="index.ts">Infrastructure layer entry point</file>
                <file name="repositories.ts">Repository implementations</file>
                <file name="persistence.ts">Persistence implementations</file>
                <file name="external.ts">External service integrations</file>
                <directory name="__tests__">
                    <file name="repositories.test.ts">Repository tests</file>
                    <file name="persistence.test.ts">Persistence tests</file>
                    <file name="external.test.ts">External service tests</file>
                    <file name="fixtures.ts">Test fixtures</file>
                </directory>
            </directory>
        </directory>

        <!-- Core DSL System -->
        <directory name="core">
            <file name="index.ts">Main entry point for DSL system</file>
            <file name="types.ts">Core type definitions</file>
            <file name="errors.ts">Error definitions</file>
            <file name="config.ts">DSL configuration</file>
            
            <!-- Parser -->
            <directory name="parser">
                <file name="index.ts">Parser entry point</file>
                <file name="lexer.ts">DSL lexer implementation</file>
                <file name="ast.ts">Abstract Syntax Tree definitions</file>
                <file name="visitor.ts">AST visitor pattern implementation</file>
                <file name="errors.ts">Parser specific errors</file>
                <directory name="__tests__">
                    <file name="lexer.test.ts">Lexer tests</file>
                    <file name="ast.test.ts">AST tests</file>
                    <file name="visitor.test.ts">Visitor tests</file>
                    <file name="fixtures.ts">Test fixtures</file>
                </directory>
            </directory>
            
            <!-- Validator -->
            <directory name="validator">
                <file name="index.ts">Validator entry point</file>
                <file name="type-checker.ts">Type checking implementation</file>
                <file name="dependency-checker.ts">Dependency validation</file>
                <file name="schema-validator.ts">Schema validation</file>
                <file name="errors.ts">Validator specific errors</file>
                <directory name="__tests__">
                    <file name="type-checker.test.ts">Type checker tests</file>
                    <file name="dependency-checker.test.ts">Dependency tests</file>
                    <file name="schema-validator.test.ts">Schema tests</file>
                    <file name="fixtures.ts">Test fixtures</file>
                </directory>
            </directory>
            
            <!-- Generator -->
            <directory name="generator">
                <file name="index.ts">Generator entry point</file>
                <file name="typescript.ts">TypeScript code generation</file>
                <file name="ui.ts">UI code generation</file>
                <file name="docs.ts">Documentation generation</file>
                <file name="errors.ts">Generator specific errors</file>
                <directory name="__tests__">
                    <file name="typescript.test.ts">TypeScript generator tests</file>
                    <file name="ui.test.ts">UI generator tests</file>
                    <file name="docs.test.ts">Docs generator tests</file>
                    <file name="fixtures.ts">Test fixtures</file>
                </directory>
            </directory>
            
            <!-- Runtime -->
            <directory name="runtime">
                <file name="index.ts">Runtime entry point</file>
                <file name="context.ts">Runtime context</file>
                <file name="executor.ts">DSL execution</file>
                <file name="metrics.ts">Runtime metrics</file>
                <file name="errors.ts">Runtime specific errors</file>
            </directory>
            
            <!-- Security -->
            <directory name="security">
                <file name="index.ts">Security entry point</file>
                <file name="auth.ts">Authentication</file>
                <file name="jwt.ts">JWT implementation</file>
                <file name="middleware.ts">Security middleware</file>
            </directory>
        </directory>
        
        <!-- Modules -->
        <directory name="modules">
            <!-- Users Module -->
            <directory name="users">
                <directory name="domain">
                    <file name="user.entity.ts">User domain entity</file>
                    <file name="user.repository.ts">User repository interface</file>
                    <file name="user.service.ts">User domain service</file>
                    <directory name="__tests__">
                        <file name="user.entity.test.ts">User entity tests</file>
                        <file name="user.repository.test.ts">Repository tests</file>
                        <file name="user.service.test.ts">Service tests</file>
                        <file name="fixtures.ts">Test fixtures</file>
                    </directory>
                </directory>
                
                <directory name="application">
                    <directory name="commands">
                        <file name="create-user.command.ts">Create user command</file>
                        <file name="update-user.command.ts">Update user command</file>
                        <file name="delete-user.command.ts">Delete user command</file>
                    </directory>
                    
                    <directory name="queries">
                        <file name="get-user.query.ts">Get user query</file>
                        <file name="list-users.query.ts">List users query</file>
                    </directory>
                    
                    <directory name="read-models">
                        <file name="user.read-model.ts">User read model</file>
                        <file name="user-list.read-model.ts">User list read model</file>
                    </directory>
                    
                    <directory name="write-models">
                        <file name="user.write-model.ts">User write model</file>
                    </directory>
                    <directory name="__tests__">
                        <directory name="commands">
                            <file name="create-user.test.ts">Create command tests</file>
                            <file name="update-user.test.ts">Update command tests</file>
                            <file name="delete-user.test.ts">Delete command tests</file>
                        </directory>
                        <directory name="queries">
                            <file name="get-user.test.ts">Get query tests</file>
                            <file name="list-users.test.ts">List query tests</file>
                        </directory>
                        <file name="fixtures.ts">Test fixtures</file>
                    </directory>
                </directory>
                
                <directory name="infrastructure">
                    <file name="user.repository.impl.ts">User repository implementation</file>
                    <file name="user.mapper.ts">User data mapper</file>
                    <directory name="__tests__">
                        <file name="repository.test.ts">Repository implementation tests</file>
                        <file name="mapper.test.ts">Mapper tests</file>
                        <file name="fixtures.ts">Test fixtures</file>
                    </directory>
                </directory>
                
                <directory name="events">
                    <file name="user-created.event.ts">User created event</file>
                    <file name="user-updated.event.ts">User updated event</file>
                    <file name="user-deleted.event.ts">User deleted event</file>
                    <file name="event-handlers.ts">Event handlers</file>
                    <directory name="__tests__">
                        <file name="event-handlers.test.ts">Event handler tests</file>
                        <file name="fixtures.ts">Test fixtures</file>
                    </directory>
                </directory>
                
                <directory name="dependencies">
                    <file name="index.ts">Module dependencies</file>
                    <file name="interfaces.ts">Dependency interfaces</file>
                </directory>
                
                <file name="index.dsl.ts">Users module DSL definition</file>
                <file name="api.ts">API endpoints</file>
                <file name="schemas.ts">Data schemas</file>
                <directory name="handlers">
                    <file name="create.ts">Create user handler</file>
                    <file name="get.ts">Get user handler</file>
                    <file name="update.ts">Update user handler</file>
                    <file name="delete.ts">Delete user handler</file>
                    <file name="auth.ts">Authentication handlers</file>
                </directory>
                <directory name="storage">
                    <file name="memory.ts">In-memory storage</file>
                    <file name="database.ts">Database storage</file>
                    <file name="seed.ts">Seed data</file>
                </directory>
                <directory name="ui">
                    <file name="forms.ts">User forms</file>
                    <file name="pages.ts">User pages</file>
                    <file name="components.ts">UI components</file>
                </directory>
                <directory name="__tests__">
                    <file name="integration.test.ts">Module integration tests</file>
                    <file name="e2e.test.ts">End-to-end tests</file>
                    <file name="fixtures.ts">Test fixtures</file>
                </directory>
            </directory>
            
            <!-- Posts Module -->
            <directory name="posts">
                <directory name="domain">
                    <file name="post.entity.ts">Post domain entity</file>
                    <file name="post.repository.ts">Post repository interface</file>
                    <file name="post.service.ts">Post domain service</file>
                </directory>
                
                <directory name="application">
                    <directory name="commands">
                        <file name="create-post.command.ts">Create post command</file>
                        <file name="update-post.command.ts">Update post command</file>
                        <file name="delete-post.command.ts">Delete post command</file>
                    </directory>
                    
                    <directory name="queries">
                        <file name="get-post.query.ts">Get post query</file>
                        <file name="list-posts.query.ts">List posts query</file>
                    </directory>
                    
                    <directory name="read-models">
                        <file name="post.read-model.ts">Post read model</file>
                        <file name="post-list.read-model.ts">Post list read model</file>
                    </directory>
                    
                    <directory name="write-models">
                        <file name="post.write-model.ts">Post write model</file>
                    </directory>
                </directory>
                
                <directory name="infrastructure">
                    <file name="post.repository.impl.ts">Post repository implementation</file>
                    <file name="post.mapper.ts">Post data mapper</file>
                </directory>
                
                <directory name="events">
                    <file name="post-created.event.ts">Post created event</file>
                    <file name="post-updated.event.ts">Post updated event</file>
                    <file name="post-deleted.event.ts">Post deleted event</file>
                    <file name="event-handlers.ts">Event handlers</file>
                </directory>
                
                <directory name="dependencies">
                    <file name="index.ts">Module dependencies</file>
                    <file name="interfaces.ts">Dependency interfaces</file>
                </directory>
                
                <file name="index.dsl.ts">Posts module DSL definition</file>
                <file name="api.ts">API endpoints</file>
                <file name="schemas.ts">Data schemas</file>
                <directory name="handlers">
                    <file name="create.ts">Create post handler</file>
                    <file name="get.ts">Get post handler</file>
                    <file name="update.ts">Update post handler</file>
                    <file name="delete.ts">Delete post handler</file>
                    <file name="category.ts">Category handlers</file>
                </directory>
                <directory name="storage">
                    <file name="memory.ts">In-memory storage</file>
                    <file name="database.ts">Database storage</file>
                    <file name="seed.ts">Seed data</file>
                </directory>
                <directory name="ui">
                    <file name="forms.ts">Post forms</file>
                    <file name="pages.ts">Post pages</file>
                    <file name="components.ts">UI components</file>
                </directory>
                <directory name="__tests__">
                    <file name="integration.test.ts">Module integration tests</file>
                    <file name="e2e.test.ts">End-to-end tests</file>
                    <file name="fixtures.ts">Test fixtures</file>
                </directory>
            </directory>
            
            <!-- Comments Module -->
            <directory name="comments">
                <directory name="domain">
                    <file name="comment.entity.ts">Comment domain entity</file>
                    <file name="comment.repository.ts">Comment repository interface</file>
                    <file name="comment.service.ts">Comment domain service</file>
                </directory>
                
                <directory name="application">
                    <directory name="commands">
                        <file name="create-comment.command.ts">Create comment command</file>
                        <file name="update-comment.command.ts">Update comment command</file>
                        <file name="delete-comment.command.ts">Delete comment command</file>
                    </directory>
                    
                    <directory name="queries">
                        <file name="get-comment.query.ts">Get comment query</file>
                        <file name="list-comments.query.ts">List comments query</file>
                    </directory>
                    
                    <directory name="read-models">
                        <file name="comment.read-model.ts">Comment read model</file>
                        <file name="comment-list.read-model.ts">Comment list read model</file>
                    </directory>
                    
                    <directory name="write-models">
                        <file name="comment.write-model.ts">Comment write model</file>
                    </directory>
                </directory>
                
                <directory name="infrastructure">
                    <file name="comment.repository.impl.ts">Comment repository implementation</file>
                    <file name="comment.mapper.ts">Comment data mapper</file>
                </directory>
                
                <directory name="events">
                    <file name="comment-created.event.ts">Comment created event</file>
                    <file name="comment-updated.event.ts">Comment updated event</file>
                    <file name="comment-deleted.event.ts">Comment deleted event</file>
                    <file name="event-handlers.ts">Event handlers</file>
                </directory>
                
                <directory name="dependencies">
                    <file name="index.ts">Module dependencies</file>
                    <file name="interfaces.ts">Dependency interfaces</file>
                </directory>
                
                <file name="index.dsl.ts">Comments module DSL definition</file>
                <file name="api.ts">API endpoints</file>
                <file name="schemas.ts">Data schemas</file>
                <directory name="handlers">
                    <file name="create.ts">Create comment handler</file>
                    <file name="get.ts">Get comment handler</file>
                    <file name="update.ts">Update comment handler</file>
                    <file name="delete.ts">Delete comment handler</file>
                </directory>
                <directory name="storage">
                    <file name="memory.ts">In-memory storage</file>
                    <file name="database.ts">Database storage</file>
                    <file name="seed.ts">Seed data</file>
                </directory>
                <directory name="ui">
                    <file name="forms.ts">Comment forms</file>
                    <file name="pages.ts">Comment pages</file>
                    <file name="components.ts">UI components</file>
                </directory>
                <directory name="__tests__">
                    <file name="integration.test.ts">Module integration tests</file>
                    <file name="e2e.test.ts">End-to-end tests</file>
                    <file name="fixtures.ts">Test fixtures</file>
                </directory>
            </directory>
        </directory>
        
        <!-- Event Sourcing -->
        <directory name="events">
            <file name="index.ts">Event sourcing entry point</file>
            <file name="event-store.ts">Event store implementation</file>
            <file name="event-bus.ts">Event bus implementation</file>
            <file name="event-handler.ts">Event handler base class</file>
            <file name="event-serializer.ts">Event serialization</file>
            <directory name="__tests__">
                <file name="event-store.test.ts">Event store tests</file>
                <file name="event-bus.test.ts">Event bus tests</file>
                <file name="event-handler.test.ts">Handler tests</file>
                <file name="event-serializer.test.ts">Serializer tests</file>
                <file name="fixtures.ts">Test fixtures</file>
            </directory>
        </directory>
        
        <!-- CQRS -->
        <directory name="cqrs">
            <file name="index.ts">CQRS entry point</file>
            <file name="command-bus.ts">Command bus implementation</file>
            <file name="query-bus.ts">Query bus implementation</file>
            <file name="command-handler.ts">Command handler base class</file>
            <file name="query-handler.ts">Query handler base class</file>
            <directory name="__tests__">
                <file name="command-bus.test.ts">Command bus tests</file>
                <file name="query-bus.test.ts">Query bus tests</file>
                <file name="command-handler.test.ts">Command handler tests</file>
                <file name="query-handler.test.ts">Query handler tests</file>
                <file name="fixtures.ts">Test fixtures</file>
            </directory>
        </directory>
        
        <!-- Shared Components -->
        <directory name="shared">
            <directory name="types">
                <file name="index.ts">Shared type definitions</file>
                <file name="api.ts">API types</file>
                <file name="ui.ts">UI types</file>
                <file name="validation.ts">Validation types</file>
            </directory>
            <directory name="utils">
                <file name="index.ts">Shared utilities</file>
                <file name="validation.ts">Validation utilities</file>
                <file name="formatting.ts">Formatting utilities</file>
                <file name="date.ts">Date utilities</file>
            </directory>
            <directory name="constants">
                <file name="index.ts">Shared constants</file>
                <file name="api.ts">API constants</file>
                <file name="ui.ts">UI constants</file>
                <file name="errors.ts">Error constants</file>
            </directory>
        </directory>
        
        <!-- Documentation -->
        <directory name="docs">
            <file name="api.md">API documentation</file>
            <file name="dsl.md">DSL documentation</file>
            <file name="ui.md">UI documentation</file>
            <file name="examples.md">Usage examples</file>
            <file name="security.md">Security documentation</file>
            <file name="testing.md">Testing documentation</file>
            <directory name="guides">
                <file name="getting-started.md">Getting started guide</file>
                <file name="best-practices.md">Best practices</file>
                <file name="troubleshooting.md">Troubleshooting guide</file>
            </directory>
        </directory>
        
        <!-- Monitoring -->
        <directory name="monitoring">
            <file name="index.ts">Monitoring entry point</file>
            <file name="metrics.ts">Metrics collection</file>
            <file name="logging.ts">Logging system</file>
            <file name="errors.ts">Error tracking</file>
            <directory name="handlers">
                <file name="prometheus.ts">Prometheus metrics handler</file>
                <file name="elasticsearch.ts">Elasticsearch logging handler</file>
                <file name="sentry.ts">Sentry error tracking handler</file>
            </directory>
        </directory>
    </directory>
    
    <!-- Root Configuration Files -->
    <file name="package.json">Project dependencies and scripts</file>
    <file name="tsconfig.json">TypeScript configuration</file>
    <file name="jest.config.js">Jest test configuration</file>
    <file name="README.md">Project documentation</file>
    <file name="docker-compose.yml">Docker configuration</file>
    <file name=".env.example">Environment variables example</file>
    
    <!-- Development Tools -->
    <directory name=".cursor">
        <file name="FEAT.md">Features and requirements</file>
        <file name="VISION.01.INTRO.md">Project vision</file>
        <file name="VISION.02.USERS.md">Users module vision</file>
        <file name="VISION.03.DSL.SERVER.md">DSL server vision</file>
        <directory name="structure">
            <file name="index.xml">This file structure</file>
        </directory>
    </directory>
    
    <!-- Test Configuration -->
    <directory name="test">
        <file name="jest.config.js">Jest configuration</file>
        <file name="setup.ts">Test setup</file>
        <file name="teardown.ts">Test teardown</file>
        <file name="helpers.ts">Test helpers</file>
        <file name="mocks.ts">Global mocks</file>
        <directory name="fixtures">
            <file name="users.json">User test fixtures</file>
            <file name="orders.json">Order test fixtures</file>
            <file name="products.json">Product test fixtures</file>
        </directory>
    </directory>
</project> 